;; Има три вградени предиката за равенство: 'eq?', 'eqv?' и 'equal?'.
;; И трите приемат два аргумента.
;;
;; 'eq?' връща истина, т.с.т.к. оценките на двата аргумента заемат едно и също място в паметта.
;; Заб. Всъщтност в зависимост от имплементацията 'eq?' може да връща истина за равни атоми, които
;; не са на едно място в паметта (тоест да е със силата на 'eqv?'). Този предикат най-малко ще
;; ползваме.
;;
;; 'eqv?' връща истина, т.с.т.к. оценките на двата аргумента заемат едно и също място в паметта
;; или са едни и същи по стойност атоми (атомите са числа, символи, булеви стойности (без функции).
;; Наредените двойки и списъците НЕ са атоми).
;;
;; 'equal?' връща истина, т.с.т.к. оценките на двата аргумента заемат едно и също място в паметта
;; или са едни и същи по стойност атоми, или наредени двойки, чиито елементи са равни в смисъла
;; на 'equal?'. В частност 'equal?' проверява равенство на списъци.
;;
;; Ако 'eq?' е истина, то 'eqv?' е истина.
;; Ако 'eqv?' е истина, то 'equal?' е истина.
;;
;; Примери:
(define (f x y) (+ x x y))
(define (g x y) (+ x x y))
(define a 1)
(define b 2)
(define b 1)
(define pair-1 (cons 4 3))
(define pair-2 (cons 4 3))
(define pair-3 (cons 5 5))

;; От математиката знаем, че в общия случай фукнции не могат да се сравняват, затова
;; предикатът дава истина за две функции, само когато заемат едно и също място в паметта.
(eq? g g)  ;; #t
(eq? f g)  ;; #f
(equal? f g) ;; #f

(eqv? pair-1 pair-2)  ;; #f, не сравнява в дълбочина.
(equal? pair-1 pair-2)  ;; #t
(equal? pair-1 pair-3)  ;; #f